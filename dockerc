#!/bin/sh

# DockerC (v1.8.2)
# Wrapper for docker compose commands in your project.
# https://github.com/matiboux/dockerc
# MIT License
# Copyright (c) 2023 Matiboux

VERSION="1.8.2"

# Default options
PRINT_HELP=false
PRINT_VERSION=false
UPDATE=false
DRY_RUN=false
QUIET=false

# Parse options
while true; do
	case "$1" in
		-h)
			# Print help and exit
			PRINT_HELP=true
			shift
			;;
		--help)
			# Print help and exit
			PRINT_HELP=true
			shift
			;;
		-v)
			# Print version and exit
			PRINT_VERSION=true
			shift
			;;
		--version)
			# Print version and exit
			PRINT_VERSION=true
			shift
			;;
		--update)
			# Update DockerC and exit
			UPDATE=true
			shift
			;;
		-n)
			# Dry run, print docker compose command without running it
			DRY_RUN=true
			shift
			;;
		-q)
			# Quiet, do not print docker compose command
			QUIET=true
			shift
			;;
		*)
			break
			;;
	esac
done

print_context_help() {
	echo "  context syntax: [first] | [first]-[second] | \"-\" | \"--\""
	echo "    first   First part of the context"
	echo "    second  Second part of the context"
	echo "    \"-\"     Use default docker compose files (\"override\" if it exists)"
	echo "    \"--\"    Use docker compose without file arguments"
}

if [ "$PRINT_HELP" = true ]; then
	# Print help and exit
	echo "Usage: $0 [options] [context] [...args]"
	echo "  args: Arguments passed to docker compose"
	print_context_help
	echo "  options:"
	echo "    -h, --help     Print this help and exit"
	echo "    -v, --version  Print version and exit"
	echo "    --update       Update DockerC and exit"
	echo "    -n             Dry run, print docker compose command without running it"
	echo "    -q             Quiet, do not print docker compose command"
	exit 0
fi

# Function to get latest version
get_latest_version() {
	# Syntax: '"tag_name": "v1.0.0",'
	LATEST_VERSION_JSON=$(curl -fsSL "https://api.github.com/repos/matiboux/dockerc/releases/latest" | grep -Eo '"tag_name": "(.+?)",')

	if [ "$(uname -s)" = "Darwin" ]; then
		# MacOS
		LATEST_VERSION="${LATEST_VERSION_JSON:14:$((${#LATEST_VERSION_JSON}-14-2))}"
	else
		# Linux
		LATEST_VERSION=$(expr substr "$LATEST_VERSION_JSON" $(expr 1 + 14) $(expr length "$LATEST_VERSION_JSON" - 14 - 2))
	fi

	echo "$LATEST_VERSION"
}

if [ "$PRINT_VERSION" = true ]; then

	# Print version and exit
	if [ "$QUIET" = false ]; then
		echo "DockerC (v$VERSION) - https://github.com/matiboux/dockerc"

		if [ "$DRY_RUN" = false ]; then
			LATEST_VERSION=$(get_latest_version)
			if [ "$VERSION" != "$LATEST_VERSION" ]; then
				echo "Notice: DockerC is not up to date, latest version is $LATEST_VERSION!"
			fi
		fi

	else
		echo "v$VERSION"
	fi

	exit 0
fi

if [ "$UPDATE" = true ]; then
	# Update DockerC and exit
	INSTALL_DIR=$(dirname "$0")

	if [ ! -d "$INSTALL_DIR" ]; then
		echo "Error: Install directory does not exist."
		exit 1
	fi

	if [ $# -gt 0 ]; then
		if [ "$1" = "HEAD" ] || [ "$1" = "head" ] || [ "$1" = "." ] || [ "$1" = "-" ]; then
			REQUIRED_VERSION="HEAD"
		else
			REQUIRED_VERSION="$1"
		fi
		shift
	else
		REQUIRED_VERSION="$(get_latest_version)"
	fi

	if [ "$DRY_RUN" = false ]; then
		echo "Updating DockerC (v$REQUIRED_VERSION)..."
		exec /bin/sh -c "curl -fsSL \"https://raw.githubusercontent.com/matiboux/dockerc/HEAD/install.sh\" | /bin/sh -s -- \"$INSTALL_DIR\" \"$REQUIRED_VERSION\""
	else
		echo "Updating DockerC (dry run):"
		echo "> curl -fsSL \"https://raw.githubusercontent.com/matiboux/dockerc/HEAD/install.sh\" | /bin/sh -s -- \"$INSTALL_DIR\" \"$REQUIRED_VERSION\""
	fi

	exit 0
fi

if [ $# -gt 0 ]; then
	# Get context from first parameter and shift
	CONTEXT="$1"
	shift
else
	CONTEXT=""
fi

# Other parameters are arguments passed to docker compose
ARGS="$@"

# Check for docker preset
if [ "$(echo "$CONTEXT" | cut -c1)" = "@" ]; then

	PRINT_DOCKER_PRESETS_HELP=false
	DOCKER_ARGS=""

	# Remove first char
	CONTEXT="${CONTEXT#?}"

	case "$CONTEXT" in

		"")
			PRINT_DOCKER_PRESETS_HELP=true
			;;

		"rfc")
			DOCKER_ARGS="container prune -f"
			;;
		"rfca")
			DOCKER_ARGS="container prune -f -a"
			;;
		"rfi")
			DOCKER_ARGS="image prune -f"
			;;
		"rfia")
			DOCKER_ARGS="image prune -f -a"
			;;
		"rf")
			DOCKER_ARGS="system prune -f"
			;;
		"rfa")
			DOCKER_ARGS="system prune -f -a"
			;;
		"rfav")
			DOCKER_ARGS="system prune -f -a --volumes"
			;;

		*)
			echo "Error: Unknown docker preset '@$CONTEXT'"
			exit 1
			;;

	esac

	if [ "$PRINT_DOCKER_PRESETS_HELP" = true ]; then
		# Print help and exit
		echo "Usage: $0 [options] [@preset] [...args]"
		echo "  args: Arguments passed to docker"
		echo "  @preset:"
		echo "    @rfc   Remove unused containers"
		echo "    @rfca  Remove all unused containers"
		echo "    @rfi   Remove unused images"
		echo "    @rfia  Remove all unused images"
		echo "    @rf    Remove unused containers, networks and images"
		echo "    @rfa   Remove all unused containers, networks and images"
		echo "    @rfav  Remove all unused containers, networks, images and volumes"
		echo "  options:"
		echo "    -n  Dry run, print docker command without running it"
		echo "    -q  Quiet, do not print docker command"
		exit 0
	fi

	if [ "$QUIET" = false ]; then
		# Print docker command
		echo ""
		echo "> docker $DOCKER_ARGS $ARGS"
		echo ""
	fi

	if [ "$DRY_RUN" = false ]; then
		# Run docker
		exec docker $DOCKER_ARGS $ARGS
	fi

	exit 0

fi


COMPOSE_FILE_ARGS=""
NO_COMPOSE_FILE_ARGS=false
ENV_FILE_ARGS=""

# If context is -, use default docker compose files (override if it exists)
if [ "$CONTEXT" = "-" ] || [ "$CONTEXT" = "." ]; then
	CONTEXT=""

# If context is --, ignore context and use docker compose without file arguments
elif [ "$CONTEXT" = "--" ]; then
	NO_COMPOSE_FILE_ARGS=true

fi

if [ "$NO_COMPOSE_FILE_ARGS" = false ]; then

	# Check in current directory, then in docker directory
	while read -r dir; do

		ENV_FILE_ARGS=""
		PREFIX=""
		COMPOSE_FILE_ARGS_1_DEFAULT=""
		COMPOSE_FILE_ARGS_1=""
		PREFIX_1=""
		COMPOSE_FILE_ARGS_2=""
		PREFIX_2=""
		MISSING_PARTS=""

		if [ -f "$dir/.env" ]; then
			ENV_FILE_ARGS="$ENV_FILE_ARGS --env-file $dir/.env"
		fi

		if [ -f "$dir/.env.local" ]; then
			ENV_FILE_ARGS="$ENV_FILE_ARGS --env-file $dir/.env.local"
		fi

		if [ -f "$dir/docker-compose.yml" ]; then
			COMPOSE_FILE_ARGS_1_DEFAULT=" -f $dir/docker-compose.yml"
		fi

		if [ ! -z "$CONTEXT" ]; then

			while read -r part; do

				if [ -z "$part" ]; then
					continue
				fi

				PREFIX="$PREFIX.$part"

				if [ -f "$dir/.env.-.$part" ]; then
					ENV_FILE_ARGS="$ENV_FILE_ARGS --env-file $dir/.env.-.$part"
				fi

				if [ -f "$dir/.env.-.$part.local" ]; then
					ENV_FILE_ARGS="$ENV_FILE_ARGS --env-file $dir/.env.-.$part.local"
				fi

				if [ -f "$dir/.env$PREFIX" ]; then
					ENV_FILE_ARGS="$ENV_FILE_ARGS --env-file $dir/.env$PREFIX"
				fi

				if [ -f "$dir/.env$PREFIX.local" ]; then
					ENV_FILE_ARGS="$ENV_FILE_ARGS --env-file $dir/.env$PREFIX.local"
				fi

				if [ -z "$COMPOSE_FILE_ARGS_2" ]; then

					# Look for docker-compose$PREFIX_1.$part.yml
					if [ -f "$dir/docker-compose$PREFIX_1.$MISSING_PARTS$part.yml" ]; then
						COMPOSE_FILE_ARGS_1="$COMPOSE_FILE_ARGS_1 -f $dir/docker-compose$PREFIX_1.$MISSING_PARTS$part.yml"
						PREFIX_1="$PREFIX_1.$MISSING_PARTS$part"
						MISSING_PARTS=""

					else
						# Part was not found, invalidate PREFIX_1
						PREFIX_1=""
					fi

				fi

				if [ -z "$COMPOSE_FILE_ARGS_1" ]; then

					if [ -z "$COMPOSE_FILE_ARGS_2" ]; then

						if [ -z "$PREFIX_2" ]; then

							# Look for docker-compose-$part.yml
							if [ -f "$dir/docker-compose-$MISSING_PARTS$part.yml" ]; then
								COMPOSE_FILE_ARGS_2="$COMPOSE_FILE_ARGS_2 -f $dir/docker-compose-$MISSING_PARTS$part.yml"
								PREFIX_2="-$MISSING_PARTS$part"
								MISSING_PARTS=""
							fi

						fi

					else

						if [ ! -z "$PREFIX_2" ]; then

							# Look for docker-compose$PREFIX_2.$part.yml
							if [ -f "$dir/docker-compose$PREFIX_2.$part.yml" ]; then
								COMPOSE_FILE_ARGS_2="$COMPOSE_FILE_ARGS_2 -f $dir/docker-compose$PREFIX_2.$part.yml"
								PREFIX_2="$PREFIX_2.$part"

							else
								# Part was not found, invalidate PREFIX_2
								PREFIX_2=""
							fi

						fi

					fi

				fi

				if [ -z "$PREFIX_1" ] && [ -z "$PREFIX_2" ]; then
					if [ -z "$MISSING_PARTS" ]; then
						MISSING_PARTS="$part."
					else
						MISSING_PARTS="$MISSING_PARTS$part."
					fi
				fi

			done <<EOF
$(echo "$CONTEXT" | tr "-" "\n" | tr "." "\n")
EOF

		fi

		if [ ! -z "$PREFIX_2" ]; then
			COMPOSE_FILE_ARGS="$COMPOSE_FILE_ARGS_2"
			break

		elif [ ! -z "$PREFIX_1" ]; then
			COMPOSE_FILE_ARGS="$COMPOSE_FILE_ARGS_1_DEFAULT$COMPOSE_FILE_ARGS_1"
			break

		elif [ ! -z "$COMPOSE_FILE_ARGS_1_DEFAULT" ]; then

			if [ "$CONTEXT" = "prod" ]; then
				COMPOSE_FILE_ARGS="$COMPOSE_FILE_ARGS_1_DEFAULT"
				break

			elif [ -z "$CONTEXT" ] || [ "$CONTEXT" = "dev" ]; then

				if [ -f "$dir/docker-compose.override.yml" ]; then
					COMPOSE_FILE_ARGS="$COMPOSE_FILE_ARGS_1_DEFAULT -f $dir/docker-compose.override.yml"
					break

				elif [ -z "$CONTEXT" ]; then
					COMPOSE_FILE_ARGS="$COMPOSE_FILE_ARGS_1_DEFAULT"
					break

				fi

			fi

		fi

	done <<EOF
.
./docker
EOF

	# If compose file arguments are empty, exit with error
	if [ -z "$COMPOSE_FILE_ARGS" ]; then
		if [ -z "$CONTEXT" ]; then
			echo "Error: Default context not found"
		else
			echo "Error: Unknown context '$CONTEXT'"
		fi
		exit 1
	fi

fi

# Check for shell arguments preset shortcut
if [ "$(echo "$ARGS" | cut -c 1-2)" = "$ " ]; then
	# Replace arguments preset shortcut
	ARGS="@$ $(echo "$ARGS" | cut -c 3-)"
fi

# Check for arguments
if [ -z "$ARGS" ]; then
	# If arguments are empty, set to the default arguments
	ARGS="up -d"

# Check for arguments preset
elif [ "$(echo "$ARGS" | cut -c1)" = "@" ]; then

	# Get first arg as preset name
	ARGS_PRESET="${ARGS%% *}"
	ARGS_PRESET="${ARGS_PRESET#?}"

	# Clear first arg from args
	if [ "@$ARGS_PRESET" = "$ARGS" ]; then
		# No other args
		ARGS=""
	else
		# Other args
		ARGS=" ${ARGS#* }"
	fi

	PRINT_ARGS_PRESET_HELP=false

	case "$ARGS_PRESET" in

		"")
			PRINT_ARGS_PRESET_HELP=true
			;;

		"u")
			ARGS="up -d$ARGS"
			;;
		"ub")
			ARGS="up --build -d$ARGS"
			;;
		"ubf")
			ARGS="up --build -d --force-recreate$ARGS"
			;;
		"ubfp")
			ARGS="up --build -d --force-recreate --pull always$ARGS"
			;;
		"ubr")
			ARGS="up --build -d --remove-orphans$ARGS"
			;;
		"ubfr")
			ARGS="up --build -d --force-recreate --remove-orphans$ARGS"
			;;
		"uf")
			ARGS="up -d --force-recreate$ARGS"
			;;
		"ur")
			ARGS="up -d --remove-orphans$ARGS"
			;;
		"ufr")
			ARGS="up -d --force-recreate --remove-orphans$ARGS"
			;;

		"d")
			ARGS="down$ARGS"
			;;
		"dr")
			ARGS="down --remove-orphans --rmi local$ARGS"
			;;
		"dra")
			ARGS="down --remove-orphans --rmi all$ARGS"
			;;
		"drav")
			ARGS="down --remove-orphans --rmi all -v$ARGS"
			;;

		"b")
			ARGS="build$ARGS"
			;;
		"bp")
			ARGS="build --pull$ARGS"
			;;
		"bf")
			ARGS="build --pull --no-cache$ARGS"
			;;

		"r")
			ARGS="run --rm$ARGS"
			;;
		"rw")
			ARGS="run -w /pwd -v $(pwd):/pwd --rm$ARGS"
			;;
		"rd")
			ARGS="run -d$ARGS"
			;;
		"rk")
			ARGS="run$ARGS"
			;;
		"rb")
			ARGS="run --rm --build$ARGS"
			;;
		"rbw")
			ARGS="run -w /pwd -v $(pwd):/pwd --rm --build$ARGS"
			;;
		"rbd")
			ARGS="run --build -d$ARGS"
			;;
		"rbk")
			ARGS="run --build$ARGS"
			;;
		"ri")
			ARGS="run --rm -it$ARGS"
			;;
		"rwi")
			ARGS="run -w /pwd -v $(pwd):/pwd --rm -it$ARGS"
			;;
		"rki")
			ARGS="run -it$ARGS"
			;;
		"rbi")
			ARGS="run --rm --build -it$ARGS"
			;;
		"rbwi")
			ARGS="run -w /pwd -v $(pwd):/pwd --rm --build -it$ARGS"
			;;
		"rbki")
			ARGS="run --build -it$ARGS"
			;;

		"sh")
			ARGS="run --rm -it --entrypoint /bin/sh$ARGS"
			;;
		"shw")
			ARGS="run -w /pwd -v $(pwd):/pwd --rm -it --entrypoint /bin/sh$ARGS"
			;;
		"$")
			ARGS="run -w /pwd -v $(pwd):/pwd --rm -it --entrypoint /bin/sh$ARGS"
			;;
		"shb")
			ARGS="run --rm --build -it --entrypoint /bin/sh$ARGS"
			;;
		"shbw")
			ARGS="run -w /pwd -v $(pwd):/pwd --rm --build -it --entrypoint /bin/sh$ARGS"
			;;
		"bash")
			ARGS="run --rm -it --entrypoint /bin/bash$ARGS"
			;;
		"bashw")
			ARGS="run -w /pwd -v $(pwd):/pwd --rm -it --entrypoint /bin/bash$ARGS"
			;;
		"bashb")
			ARGS="run --rm --build -it --entrypoint /bin/bash$ARGS"
			;;
		"bashbw")
			ARGS="run -w /pwd -v $(pwd):/pwd --rm --build -it --entrypoint /bin/bash$ARGS"
			;;

		"l")
			ARGS="logs -n 100$ARGS"
			;;
		"lf")
			ARGS="logs -n 100 -f$ARGS"
			;;
		"lt")
			ARGS="logs -n 100 -t$ARGS"
			;;
		"ls")
			ARGS="logs -n 100 --no-log-prefix$ARGS"
			;;
		"lft")
			ARGS="logs -n 100 -f -t$ARGS"
			;;
		"lfs")
			ARGS="logs -n 100 -f --no-log-prefix$ARGS"
			;;
		"lfts")
			ARGS="logs -n 100 -f -t --no-log-prefix$ARGS"
			;;
		"lts")
			ARGS="logs -n 100 -t --no-log-prefix$ARGS"
			;;

		"p")
			ARGS="ps$ARGS"
			;;
		"pa")
			ARGS="ps -a$ARGS"
			;;

		"pu")
			ARGS="push$ARGS"
			;;

		"rf")
			ARGS="rm -f$ARGS"
			;;
		"rfv")
			ARGS="rm -f -v$ARGS"
			;;

		*)
			echo "Error: Unknown args preset '@$ARGS_PRESET'"
			exit 1
			;;

	esac

	if [ "$PRINT_ARGS_PRESET_HELP" = true ]; then
		# Print help and exit
		echo "Usage: $0 [options] [context] [@preset] [...args]"
		echo "  args: Arguments passed to docker compose"
		echo "  @preset:"
		echo "    @u     up -d"
		echo "    @ub    up --build -d"
		echo "    @ubf   up --build -d --force-recreate"
		echo "    @ubfp  up --build -d --force-recreate --pull always"
		echo "    @ubr   up --build -d --remove-orphans"
		echo "    @ubfr  up --build -d --force-recreate --remove-orphans"
		echo "    @uf    up -d --force-recreate"
		echo "    @ur    up -d --remove-orphans"
		echo "    @ufr   up -d --force-recreate --remove-orphans"
		echo "    @d     down --remove-orphans"
		echo "    @dr    down --remove-orphans --rmi local"
		echo "    @dra   down --remove-orphans --rmi all"
		echo "    @drav  down --remove-orphans --rmi all -v"
		echo "    @r     run --rm"
		echo "    @rb    run --rm --build"
		echo "    @ri    run --rm -it"
		echo "    @rbi   run --rm --build -it"
		echo "    @l     logs"
		echo "    @rf    rm -f"
		echo "    @rfv   rm -f -v"
		print_context_help
		echo "  options:"
		echo "    -n  Dry run, print docker compose command without running it"
		echo "    -q  Quiet, do not print docker compose command"
		exit 0
	fi

fi

if [ "$QUIET" = false ]; then
	# Print docker compose command
	echo ""
	echo "> docker compose$COMPOSE_FILE_ARGS$ENV_FILE_ARGS $ARGS"
	echo ""
fi

if [ "$DRY_RUN" = false ]; then
	# Run docker compose
	exec docker compose$COMPOSE_FILE_ARGS$ENV_FILE_ARGS $ARGS
fi
