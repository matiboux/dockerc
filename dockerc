#!/bin/sh

# DockerC (v1.3.2)
# Wrapper for docker compose commands in your project.
# https://github.com/matiboux/dockerc
# MIT License
# Copyright (c) 2023 Matiboux

VERSION="1.3.2"

# Default options
DRY_RUN=false
QUIET=false

# Parse options
while true; do
	case "$1" in
		--help)
			# Print help and exit
			echo "Usage: $0 [options] [context] [...args]"
			echo "  args: Arguments passed to docker compose"
			echo "  context syntax: [first] | [first]-[second] | \"-\" | \"--\""
			echo "    first   First part of the context"
			echo "    second  Second part of the context"
			echo "    \"-\"     Use default docker compose files (\"override\" if it exists)"
			echo "    \"--\"    Use docker compose without file arguments"
			echo "  options:"
			echo "    --help  Print this help"
			echo "    -n      Dry run, print docker compose command without running it"
			echo "    -q      Quiet, do not print docker compose command"
			exit 0
			;;
		--version)
			# Print version and exit
			echo "DockerC (v$VERSION) - https://github.com/matiboux/dockerc"
			exit 0
			;;
		-n)
			# Dry run, print docker compose command without running it
			DRY_RUN=true
			shift
			;;
		-q)
			# Quiet, do not print docker compose command
			QUIET=true
			shift
			;;
		*)
			break
			;;
	esac
done

if [ $# -gt 0 ]; then
	# Get context from first parameter and shift
	CONTEXT="$1"
	shift
else
	CONTEXT=""
fi

# Other parameters are arguments passed to docker compose
ARGS="$@"
if [ -z "$ARGS" ]; then
	# If arguments are empty, set to the default arguments
	ARGS="up -d"
fi

COMPOSE_FILE_ARGS=""
ENV_FILE_ARGS=""

# If context is --, ignore context and use docker compose without file arguments
NO_COMPOSE_FILE_ARGS=false
if [ "$CONTEXT" = "--" ]; then
	NO_COMPOSE_FILE_ARGS=true
fi

if [ "$NO_COMPOSE_FILE_ARGS" = false ]; then

	if [ ! -z "$CONTEXT" ]; then

		# Check in current directory, then in docker directory
		while read -r dir; do

			if [ -f "$dir/.env" ]; then
				ENV_FILE_ARGS="$ENV_FILE_ARGS --env-file $dir/.env"
			fi

			if [ -f "$dir/.env.local" ]; then
				ENV_FILE_ARGS="$ENV_FILE_ARGS --env-file $dir/.env.local"
			fi

			lastprefix=""

			while read -r part; do

				echo "Part: $part"

				if [ -z "$part" ]; then
					continue
				fi

				if [ -z "$COMPOSE_FILE_ARGS" ]; then

					# Look for docker-compose-$part.yml
					if [ -f "$dir/docker-compose-$part.yml" ]; then
						COMPOSE_FILE_ARGS=" -f $dir/docker-compose-$part.yml"
						lastprefix="-$part"

					elif [ -f "$dir/docker-compose.yml" ]; then
						COMPOSE_FILE_ARGS=" -f $dir/docker-compose.yml"
						lastprefix=""

					fi

					if [ ! -z "$lastprefix" ]; then
						# Part was consumed, continue
						echo "1 COMPOSE_FILE_ARGS: $COMPOSE_FILE_ARGS"
						continue
					fi

				fi

				# Look for docker-compose$lastprefix.$part.yml
				if [ -f "$dir/docker-compose$lastprefix.$part.yml" ]; then
					COMPOSE_FILE_ARGS="$COMPOSE_FILE_ARGS -f $dir/docker-compose$lastprefix.$part.yml"
					lastprefix="$lastprefix.$part"
				fi

				echo "2 COMPOSE_FILE_ARGS: $COMPOSE_FILE_ARGS"

			done <<EOF
$(echo "$CONTEXT" | tr "-" "\n" | tr "." "\n")
EOF

			if [ -z "$lastprefix" ]; then
				# Reset because base context was not found
				COMPOSE_FILE_ARGS=""

			elif [ ! -z "$COMPOSE_FILE_ARGS" ]; then
				# Break loop if compose file arguments are set!
				break

			fi

		done <<EOF
.
./docker
EOF

	fi

	# If compose file arguments are empty, check for default and special contexts
	if [ -z "$COMPOSE_FILE_ARGS" ] && \
		[ -z "$CONTEXT" ] || [ "$CONTEXT" = "dev" ] || [ "$CONTEXT" = "prod" ]; then

		while read -r dir; do

			if [ -f "$dir/docker-compose.yml" ]; then
				COMPOSE_FILE_ARGS=" -f $dir/docker-compose.yml"
			fi

			if [ -f "$dir/docker-compose.override.yml" ] && \
				([ -z "$CONTEXT" ] || [ "$CONTEXT" = "dev" ]);
			then
				COMPOSE_FILE_ARGS=" -f $dir/docker-compose.yml -f $dir/docker-compose.override.yml"
			fi

			# Break loop because compose file arguments are set!
			break

		done <<EOF
.
./docker
EOF

	fi

	# If compose file arguments are empty, exit with error
	if [ -z "$COMPOSE_FILE_ARGS" ]; then
		if [ -z "$CONTEXT" ]; then
			echo "Error: Default context not found"
		else
			echo "Error: Unknown context '$CONTEXT'"
		fi
		exit 1
	fi

fi

if [ "$QUIET" = false ]; then
	# Print docker compose command
	echo ""
	echo "> docker compose$COMPOSE_FILE_ARGS$ENV_FILE_ARGS $ARGS"
	echo ""
fi

if [ "$DRY_RUN" = false ]; then
	# Run docker compose
	exec docker compose$COMPOSE_FILE_ARGS$ENV_FILE_ARGS $ARGS
fi
