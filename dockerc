#!/bin/sh

# DockerC (v1.6.1)
# Wrapper for docker compose commands in your project.
# https://github.com/matiboux/dockerc
# MIT License
# Copyright (c) 2023 Matiboux

VERSION="1.6.1"

# Default options
PRINT_HELP=false
PRINT_VERSION=false
UPDATE=false
DRY_RUN=false
QUIET=false

# Parse options
while true; do
	case "$1" in
		-h)
			# Print help and exit
			PRINT_HELP=true
			shift
			;;
		--help)
			# Print help and exit
			PRINT_HELP=true
			shift
			;;
		-v)
			# Print version and exit
			PRINT_VERSION=true
			shift
			;;
		--version)
			# Print version and exit
			PRINT_VERSION=true
			shift
			;;
		--update)
			# Update DockerC and exit
			UPDATE=true
			shift
			;;
		-n)
			# Dry run, print docker compose command without running it
			DRY_RUN=true
			shift
			;;
		-q)
			# Quiet, do not print docker compose command
			QUIET=true
			shift
			;;
		*)
			break
			;;
	esac
done

if [ "$PRINT_HELP" = true ]; then
	# Print help and exit
	echo "Usage: $0 [options] [context] [...args]"
	echo "  args: Arguments passed to docker compose"
	echo "  context syntax: [first] | [first]-[second] | \"-\" | \"--\""
	echo "    first   First part of the context"
	echo "    second  Second part of the context"
	echo "    \"-\"     Use default docker compose files (\"override\" if it exists)"
	echo "    \"--\"    Use docker compose without file arguments"
	echo "  options:"
	echo "    -h, --help     Print this help and exit"
	echo "    -v, --version  Print version and exit"
	echo "    --update       Update DockerC and exit"
	echo "    -n             Dry run, print docker compose command without running it"
	echo "    -q             Quiet, do not print docker compose command"
	exit 0
fi

# Function to get latest version
get_latest_version() {
	# Syntax: '"tag_name": "v1.0.0",'
	LATEST_VERSION_JSON=$(curl -fsSL "https://api.github.com/repos/matiboux/dockerc/releases/latest" | grep -Eo '"tag_name": "(.+?)",')

	if [ "$(uname -s)" = "Darwin" ]; then
		# MacOS
		LATEST_VERSION="${LATEST_VERSION_JSON:14:$((${#LATEST_VERSION_JSON}-14-2))}"
	else
		# Linux
		LATEST_VERSION=$(expr substr "$LATEST_VERSION_JSON" $(expr 1 + 14) $(expr length "$LATEST_VERSION_JSON" - 14 - 2))
	fi

	echo "$LATEST_VERSION"
}

if [ "$PRINT_VERSION" = true ]; then

	# Print version and exit
	if [ "$QUIET" = false ]; then
		echo "DockerC (v$VERSION) - https://github.com/matiboux/dockerc"

		if [ "$DRY_RUN" = false ]; then
			LATEST_VERSION=$(get_latest_version)
			if [ "$VERSION" != "$LATEST_VERSION" ]; then
				echo "Notice: DockerC is not up to date, latest version is $LATEST_VERSION!"
			fi
		fi

	else
		echo "v$VERSION"
	fi

	exit 0
fi

if [ "$UPDATE" = true ]; then
	# Update DockerC and exit
	INSTALL_DIR=$(dirname "$0")

	if [ ! -d "$INSTALL_DIR" ]; then
		echo "Error: Install directory does not exist."
		exit 1
	fi

	if [ $# -gt 0 ]; then
		if [ "$1" = "HEAD" ] || [ "$1" = "head" ] || [ "$1" = "." ] || [ "$1" = "-" ]; then
			REQUIRED_VERSION="HEAD"
		else
			REQUIRED_VERSION="$1"
		fi
		shift
	else
		REQUIRED_VERSION="$(get_latest_version)"
	fi

	if [ "$DRY_RUN" = false ]; then
		echo "Updating DockerC (v$REQUIRED_VERSION)..."
		exec /bin/sh -c "curl -fsSL \"https://raw.githubusercontent.com/matiboux/dockerc/HEAD/install.sh\" | /bin/sh -s -- \"$INSTALL_DIR\" \"$REQUIRED_VERSION\""
	else
		echo "Updating DockerC (dry run):"
		echo "> curl -fsSL \"https://raw.githubusercontent.com/matiboux/dockerc/HEAD/install.sh\" | /bin/sh -s -- \"$INSTALL_DIR\" \"$REQUIRED_VERSION\""
	fi

	exit 0
fi

if [ $# -gt 0 ]; then
	# Get context from first parameter and shift
	CONTEXT="$1"
	shift
else
	CONTEXT=""
fi

# Other parameters are arguments passed to docker compose
ARGS="$@"
if [ -z "$ARGS" ]; then
	# If arguments are empty, set to the default arguments
	ARGS="up -d"
fi

# Check for docker preset
if [ "${CONTEXT:0:1}" = "@" ]; then

	DOCKER_ARGS=""

	# Remove first char
	CONTEXT="${CONTEXT#?}"

	case "$CONTEXT" in

		"rfc")
			DOCKER_ARGS="container prune -f"
			;;
		"rfi")
			DOCKER_ARGS="image prune -f"
			;;
		"rf")
			DOCKER_ARGS="system prune -f"
			;;
		"rfa")
			DOCKER_ARGS="system prune -f -a"
			;;
		"rfav")
			DOCKER_ARGS="system prune -f -a --volumes"
			;;

		*)
			echo "Error: Unknown preset '@$CONTEXT'"
			exit 1
			;;

	esac

	if [ "$QUIET" = false ]; then
		# Print docker command
		echo ""
		echo "> docker $DOCKER_ARGS"
		echo ""
	fi

	if [ "$DRY_RUN" = false ]; then
		# Run docker
		exec docker $DOCKER_ARGS
	fi

	exit 0

fi


COMPOSE_FILE_ARGS=""
NO_COMPOSE_FILE_ARGS=false
ENV_FILE_ARGS=""

# If context is -, use default docker compose files (override if it exists)
if [ "$CONTEXT" = "-" ] || [ "$CONTEXT" = "." ]; then
	CONTEXT=""

# If context is --, ignore context and use docker compose without file arguments
elif [ "$CONTEXT" = "--" ]; then
	NO_COMPOSE_FILE_ARGS=true

fi

if [ "$NO_COMPOSE_FILE_ARGS" = false ]; then

	# Check in current directory, then in docker directory
	while read -r dir; do

		ENV_FILE_ARGS=""
		PREFIX=""
		COMPOSE_FILE_ARGS_1=""
		PREFIX_1=""
		COMPOSE_FILE_ARGS_2=""
		PREFIX_2=""

		if [ -f "$dir/.env" ]; then
			ENV_FILE_ARGS="$ENV_FILE_ARGS --env-file $dir/.env"
		fi

		if [ -f "$dir/.env.local" ]; then
			ENV_FILE_ARGS="$ENV_FILE_ARGS --env-file $dir/.env.local"
		fi

		if [ -f "$dir/docker-compose.yml" ]; then
			COMPOSE_FILE_ARGS_1="$COMPOSE_FILE_ARGS_1 -f $dir/docker-compose.yml"
		fi

		if [ ! -z "$CONTEXT" ]; then

			while read -r part; do

				if [ -z "$part" ]; then
					continue
				fi

				PREFIX="$PREFIX.$part"

				if [ -f "$dir/.env.-.$part" ]; then
					ENV_FILE_ARGS="$ENV_FILE_ARGS --env-file $dir/.env.-.$part"
				fi

				if [ -f "$dir/.env.-.$part.local" ]; then
					ENV_FILE_ARGS="$ENV_FILE_ARGS --env-file $dir/.env.-.$part.local"
				fi

				if [ -f "$dir/.env$PREFIX" ]; then
					ENV_FILE_ARGS="$ENV_FILE_ARGS --env-file $dir/.env$PREFIX"
				fi

				if [ -f "$dir/.env$PREFIX.local" ]; then
					ENV_FILE_ARGS="$ENV_FILE_ARGS --env-file $dir/.env$PREFIX.local"
				fi

				if [ ! -z "$COMPOSE_FILE_ARGS_1" ]; then

					# Look for docker-compose$PREFIX_1.$part.yml
					if [ -f "$dir/docker-compose$PREFIX_1.$part.yml" ]; then
						COMPOSE_FILE_ARGS_1="$COMPOSE_FILE_ARGS_1 -f $dir/docker-compose$PREFIX_1.$part.yml"
						PREFIX_1="$PREFIX_1.$part"

					else
						# Part was not found, invalidate PREFIX_1
						COMPOSE_FILE_ARGS_1=""
						PREFIX_1=""
					fi

				fi

				if [ -z "$COMPOSE_FILE_ARGS_2" ] && [ -z "$PREFIX_2" ]; then

					# Look for docker-compose-$part.yml
					if [ -f "$dir/docker-compose-$part.yml" ]; then
						COMPOSE_FILE_ARGS_2="$COMPOSE_FILE_ARGS_2 -f $dir/docker-compose-$part.yml"
						PREFIX_2="-$part"
					fi

				elif [ ! -z "$COMPOSE_FILE_ARGS_2" ] && [ ! -z "$PREFIX_2" ]; then

					# Look for docker-compose$PREFIX_2.$part.yml
					if [ -f "$dir/docker-compose$PREFIX_2.$part.yml" ]; then
						COMPOSE_FILE_ARGS_2="$COMPOSE_FILE_ARGS_2 -f $dir/docker-compose$PREFIX_2.$part.yml"
						PREFIX_2="$PREFIX_2.$part"

					else
						# Part was not found, invalidate PREFIX_2
						COMPOSE_FILE_ARGS_2=""
						PREFIX_2=""
					fi

				fi

				if [ -z "$PREFIX_1" ] && [ -z "$PREFIX_2" ]; then
					# Break loop if both are invalid
					break
				fi

			done <<EOF
$(echo "$CONTEXT" | tr "-" "\n" | tr "." "\n")
EOF

		fi

		if [ ! -z "$PREFIX_2" ]; then
			COMPOSE_FILE_ARGS="$COMPOSE_FILE_ARGS_2"
			break

		elif [ ! -z "$PREFIX_1" ]; then
			COMPOSE_FILE_ARGS="$COMPOSE_FILE_ARGS_1"
			break

		elif [ ! -z "$COMPOSE_FILE_ARGS_1" ]; then

			if [ "$CONTEXT" = "prod" ]; then
				COMPOSE_FILE_ARGS="$COMPOSE_FILE_ARGS_1"
				break

			elif [ -z "$CONTEXT" ] || [ "$CONTEXT" = "dev" ]; then

				if [ -f "$dir/docker-compose.override.yml" ]; then
					COMPOSE_FILE_ARGS="$COMPOSE_FILE_ARGS_1 -f $dir/docker-compose.override.yml"
					break

				elif [ -z "$CONTEXT" ]; then
					COMPOSE_FILE_ARGS="$COMPOSE_FILE_ARGS_1"
					break

				fi

			fi

		fi

	done <<EOF
.
./docker
EOF

	# If compose file arguments are empty, exit with error
	if [ -z "$COMPOSE_FILE_ARGS" ]; then
		if [ -z "$CONTEXT" ]; then
			echo "Error: Default context not found"
		else
			echo "Error: Unknown context '$CONTEXT'"
		fi
		exit 1
	fi

fi

# Check for arguments preset
if [ "${ARGS:0:1}" = "@" ]; then

	# Get first arg as preset name
	ARGS_PRESET="${ARGS%% *}"
	ARGS_PRESET="${ARGS_PRESET#?}"

	# Clear first arg from args
	if [[ "$ARGS" == *" "* ]]; then
		ARGS=" ${ARGS#* }"
	else
		ARGS=""
	fi

	case "$ARGS_PRESET" in

		"u")
			ARGS="up$ARGS"
			;;
		"ud")
			ARGS="up -d$ARGS"
			;;
		"ubd")
			ARGS="up --build -d$ARGS"
			;;
		"ubdf")
			ARGS="up --build -d --force-recreate$ARGS"
			;;
		"ubdfp")
			ARGS="up --build -d --force-recreate --pull always$ARGS"
			;;
		"ubdr")
			ARGS="up --build -d --remove-orphans$ARGS"
			;;
		"ubdfr")
			ARGS="up --build -d --force-recreate --remove-orphans$ARGS"
			;;
		"udf")
			ARGS="up -d --force-recreate$ARGS"
			;;
		"udr")
			ARGS="up -d --remove-orphans$ARGS"
			;;
		"udfr")
			ARGS="up -d --force-recreate --remove-orphans$ARGS"
			;;

		"d")
			ARGS="down$ARGS"
			;;
		"dr")
			ARGS="down --remove-orphans --rmi local$ARGS"
			;;
		"drr")
			ARGS="down --remove-orphans --rmi all$ARGS"
			;;
		"drrv")
			ARGS="down --remove-orphans --rmi all -v$ARGS"
			;;

		"rn")
			ARGS="run --rm$ARGS"
			;;

		"l")
			ARGS="logs$ARGS"
			;;

		"r")
			ARGS="rm$ARGS"
			;;
		"rf")
			ARGS="rm -f$ARGS"
			;;
		"rfv")
			ARGS="rm -f -v$ARGS"
			;;

		*)
			echo "Error: Unknown preset '@$ARGS_PRESET'"
			exit 1
			;;

	esac

fi

if [ "$QUIET" = false ]; then
	# Print docker compose command
	echo ""
	echo "> docker compose$COMPOSE_FILE_ARGS$ENV_FILE_ARGS $ARGS"
	echo ""
fi

if [ "$DRY_RUN" = false ]; then
	# Run docker compose
	exec docker compose$COMPOSE_FILE_ARGS$ENV_FILE_ARGS $ARGS
fi
