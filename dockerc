#!/bin/sh

# DockerC (v1.10.0)
# Wrapper for docker compose commands in your project.
# https://github.com/matiboux/dockerc
# MIT License
# Copyright (c) 2023 Matiboux
# This project is not affiliated with Docker, Inc.

VERSION='1.10.0'

ERROR_CODE=''

# Parse arguments
# Dummy while loop to allow breaking
while true; do

	# Parse options arguments
	while [ "$#" -gt 0 ]; do

		case "$1" in

			'--help' | '-h' )
				# Print general help
				DOCKERC_PRINT_HELP='true'
				shift
				;;

			'--version' | '-v' )
				# Print version
				DOCKERC_PRINT_VERSION='true'
				shift
				;;

			'--update' )
				# Update DockerC
				DOCKERC_UPDATE='true'
				shift
				;;

			'--force' | '-f' )
				# Force, for example ignores abstract contexts
				DOCKERC_FORCE='true'
				shift
				;;

			'--dry-run' | '-n' )
				# Dry run, print docker compose command without running it
				DOCKERC_DRY_RUN='true'
				shift
				;;

			'--quiet' | '-q' )
				# Quiet, do not print docker compose command
				DOCKERC_QUIET='true'
				shift
				;;

			* )
				break
				;;

		esac

	done

	if
		[ "$DOCKERC_PRINT_HELP" = 'true' ] ||
		[ "$DOCKERC_PRINT_VERSION" = 'true' ] ||
		[ "$DOCKERC_UPDATE" = 'true' ]
	then
		# Stop parsing arguments
		break
	fi

	# Check for optional positional arguments
	if [ "$#" -le 0 ]; then
		# No more arguments
		break
	fi

	# Parse context optional positional argument

	if [ "$1" = '?' ]; then
		# Print context help
		DOCKERC_PRINT_HELP_CONTEXT='true'
		# Stop parsing arguments
		break
	fi

	if [ "$1" = '@' ]; then
		# Print compose preset help
		DOCKERC_PRINT_HELP_COMPOSE_PRESET='true'
		# Stop parsing arguments
		break
	fi

	DOCKERC_CONTEXT="$1"
	shift

	# Check for optional positional arguments
	if [ "$#" -le 0 ]; then
		# No more arguments
		break
	fi

	# Parse command preset optional positional argument

	if [ "$1" = '@' ]; then
		# Print command preset help
		DOCKERC_PRINT_HELP_COMMAND_PRESET='true'
		# Stop parsing arguments
		break
	fi

	DOCKERC_COMMAND_PRESET="$1"
	shift

	# Check for optional positional arguments
	if [ "$#" -le 0 ]; then
		# No more arguments
		break
	fi

	# Parse command args optional positional arguments
	DOCKERC_COMMAND_ARGS=''
	for ARG in "$@"; do

		if [ -z "$ARG" ]; then
			# Skip empty arguments
			continue
		fi

		if [ "$(echo "$ARG" | grep "[ '\"\$\`;*&#<>|]")" ]; then
			# Escape argument with spaces or special shell characters
			# Replace single quotes with escaped single quotes
			ARG="'$(echo "$ARG" | sed "s/'/'\"'\"'/g")'"
		fi

		DOCKERC_COMMAND_ARGS="$DOCKERC_COMMAND_ARGS $ARG"

	done

	# Stop parsing arguments
	break

done

if [ "$DOCKERC_PRINT_HELP" = 'true' ]; then
	# Print help & exit
	echo 'Usage:'
	echo "  $0 [options] [ <context> [@command_preset] [...args] ]"
	echo "  $0 [options] <@compose_preset> [...args]"
	echo ''
	echo 'Options:'
	echo '  -h, --help     Print this help message'
	echo '  -v, --version  Print version'
	echo '  --update       Update DockerC'
	echo '  -f, --force    Force, for example ignores abstract contexts'
	echo '  -n, --dry-run  Dry run, print docker compose command without running it'
	echo '  -q, --quiet    Quiet, do not print docker compose command'
	echo ''
	echo 'Arguments:'
	echo '  options          DockerC options'
	echo '  context          Docker compose files context'
	echo '  @command_preset  DockerC command preset (shortcut for a command)'
	echo '  @compose_preset  DockerC compose preset (shortcut for a command)'
	echo '  args             Arguments appended to the docker compose command'
	echo ''
	echo 'Help commands:'
	echo "  $0 ?    See context argument help"
	echo "  $0 - @  See @command_preset argument help"
	echo "  $0 @    See @compose_preset argument help"
	exit ${ERROR_CODE:-0}
fi

print_context_help() {
	echo '  context syntax: [first] | [first]-[second] | "-" | "--"'
	echo '    first   First part of the context'
	echo '    second  Second part of the context'
	echo '    "-"     Use default docker compose files ("override" if it exists)'
	echo '    "--"    Use docker compose without file arguments'
}

if [ "$DOCKERC_PRINT_HELP_CONTEXT" = 'true' ]; then
	# Print context help & exit
	echo 'DockerC context argument values:'
	echo ''
	echo '  (empty), -'
	echo '    Look for default docker compose files'
	echo '    Usage:'
	echo "      $0 [options]"
	echo "      $0 [options] - [@command_preset] [...args]"
	echo '    Used default docker compose files are:'
	echo '      - docker-compose.yml'
	echo '      - docker-compose.override.yml (if it exists)'
	echo ''
	echo '  --'
	echo '    Run docker compose without file arguments'
	echo '    Usage:'
	echo "      $0 [options] -- [@command_preset] [...args]"
	echo ''
	echo '  level1[.level2[...]]]'
	echo '    Look for docker compose files matching context levels'
	echo '    Usage:'
	echo "      $0 [options] level1[.level2[...] [@command_preset] [...args]"
	echo '    Example:'
	echo "      '$0 prod.boosted' will look for:"
	echo '        - docker-compose.yml'
	echo '        - docker-compose.prod.yml'
	echo '        - docker-compose.prod.boosted.yml'
	echo ''
	echo 'Use dry run option (--dry-run or -n) to see the docker compose command'
	echo 'and files that will be used without running it.'
	echo ''
	echo "Use '$0 --help' for more help."
	exit ${ERROR_CODE:-0}
fi

if [ "$DOCKERC_PRINT_HELP_COMPOSE_PRESET" = 'true' ]; then
	# Print compose preset help & exit
	echo "Usage: $0 [options] <@compose_preset> [...args]"
	echo ''
	echo 'Compose presets:'
	echo '  @rfc   Remove unused containers'
	echo '  @rfi   Remove dangling images'
	echo '  @rfia  Remove all unused images'
	echo '  @rf    Remove unused containers, networks and images'
	echo '  @rfa   Remove all unused containers, networks and images'
	echo '  @rfav  Remove all unused containers, networks, images and volumes'
	echo '  @sa    Stop all running containers'
	echo '  @rmf   Remove running containers, force'
	echo '  @rms   Remove stopped containers'
	echo '  @rmsf  Remove stopped containers, force'
	echo '    (aliases: @rmfs)'
	echo '  @rma   Remove all containers'
	echo '  @rmaf  Remove all containers, force'
	echo '    (aliases: @rmfa)'
	echo ''
	echo 'Arguments will be appended to the docker command that will be run.'
	echo ''
	echo "Use '$0 --help' for more help."
	exit ${ERROR_CODE:-0}
fi

if [ "$DOCKERC_PRINT_HELP_COMMAND_PRESET" = 'true' ]; then
	# Print compose preset help & exit
	echo "Usage: $0 [options] <context> [@command_preset] [...args]"
	echo ''
	echo 'Command presets:'
	echo '  @u     up -d'
	echo '  @ua    up'
	echo '  @ub    up --build -d'
	echo '  @uba   up --build'
	echo '  @ubf   up --build -d --force-recreate'
	echo '  @ubfa  up --build --force-recreate'
	echo '  @ubfp  up --build -d --force-recreate --pull always'
	echo '  @ubfap up --build --force-recreate --pull always'
	echo '  @ubr   up --build -d --remove-orphans'
	echo '  @ubar  up --build --remove-orphans'
	echo '  @ubfr  up --build -d --force-recreate --remove-orphans'
	echo '  @ubfar up --build --force-recreate --remove-orphans'
	echo '  @uf    up -d --force-recreate'
	echo '  @ufa   up --force-recreate'
	echo '  @ur    up -d --remove-orphans'
	echo '  @uar   up --remove-orphans'
	echo '  @ufr   up -d --force-recreate --remove-orphans'
	echo '  @ufar  up --force-recreate --remove-orphans'
	echo '  @b     build'
	echo '  @bp    build --pull'
	echo '  @bf    build --pull --no-cache'
	echo '  @bn    build --dry-run --pull --no-cache'
	echo '  @w     watch'
	echo '  @wq    watch --quiet'
	echo '  @ww    watch --no-up'
	echo '  @wqw   watch --quiet --no-up'
	echo '  @wn    watch --dry-run'
	echo '  @d     down'
	echo '  @da    down --remove-orphans'
	echo '  @dr    down --remove-orphans --rmi local'
	echo '  @dra   down --remove-orphans --rmi all'
	echo '  @drav  down --remove-orphans --rmi all -v'
	echo '  @drv   down --remove-orphans -v'
	echo '  @r     run --rm'
	echo '  @rw    run -w /pwd -v $(pwd):/pwd --rm'
	echo '  @rd    run -d'
	echo '  @rk    run'
	echo '  @rb    run --build --rm'
	echo '  @rbw   run --build -w /pwd -v $(pwd):/pwd --rm'
	echo '  @rbd   run --build -d'
	echo '  @rbk   run --build'
	echo '  @ri    run -i --rm'
	echo '  @rwi   run -w /pwd -v $(pwd):/pwd -i --rm'
	echo '  @rki   run -i'
	echo '  @rbi   run --build -i --rm'
	echo '  @rbwi  run --build -w /pwd -v $(pwd):/pwd -i --rm'
	echo '  @rbki  run --build -i'
	echo '  @sh    run -i --rm --entrypoint /bin/sh'
	echo '  @shw   run -w /pwd -v $(pwd):/pwd -i --rm --entrypoint /bin/sh'
	echo '    (aliases: $, @$)'
	echo '  @shb   run --build -i --rm --entrypoint /bin/sh'
	echo '  @shbw  run --build -w /pwd -v $(pwd):/pwd -i --rm --entrypoint /bin/sh'
	echo '  @bash  run -i --rm --entrypoint /bin/bash'
	echo '  @bashw run -w /pwd -v $(pwd):/pwd -i --rm --entrypoint /bin/bash'
	echo '  @bashb run --build -i --rm --entrypoint /bin/bash'
	echo '  @bashbw run --build -w /pwd -v $(pwd):/pwd -i --rm --entrypoint /bin/bash'
	echo '  @l     logs -n 100'
	echo '  @lf    logs -n 100 -f'
	echo '  @lt    logs -n 100 -t'
	echo '  @ls    logs -n 100 --no-log-prefix'
	echo '  @lft   logs -n 100 -f -t'
	echo '  @lfs   logs -n 100 -f --no-log-prefix'
	echo '  @lfts  logs -n 100 -f -t --no-log-prefix'
	echo '  @lts   logs -n 100 -t --no-log-prefix'
	echo '  @ll    logs'
	echo '  @llf   logs -f'
	echo '  @llt   logs -t'
	echo '  @lls   logs --no-log-prefix'
	echo '  @llft  logs -f -t'
	echo '  @llfs  logs -f --no-log-prefix'
	echo '  @llfts logs -f -t --no-log-prefix'
	echo '  @llts  logs -t --no-log-prefix'
	echo '  @p     ps'
	echo '  @pa    ps -a'
	echo '  @pu    push'
	echo '  @pl    pull'
	echo '  @rs    rm --stop'
	echo '  @rf    rm -f'
	echo '  @rfv   rm -f -v'
	echo ''
	echo 'Arguments will be appended to the docker command that will be run.'
	echo 'If the command preset is empty, the arguments should include the command.'
	echo ''
	echo "Use '$0 --help' for more help."
	exit ${ERROR_CODE:-0}
fi

UPDATE='false'
if [ -n "$DOCKERC_UPDATE" ]; then
	# Use from argument or environment variable
	UPDATE="$DOCKERC_UPDATE"
fi

FORCE='false'
if [ -n "$DOCKERC_FORCE" ]; then
	# Use from argument or environment variable
	FORCE="$DOCKERC_FORCE"
fi

DRY_RUN='false'
if [ -n "$DOCKERC_DRY_RUN" ]; then
	# Use from argument or environment variable
	DRY_RUN="$DOCKERC_DRY_RUN"
fi

QUIET='false'
if [ -n "$DOCKERC_QUIET" ]; then
	# Use from argument or environment variable
	QUIET="$DOCKERC_QUIET"
fi

CONTEXT=''
if [ -n "$DOCKERC_CONTEXT" ]; then
	# Use from argument or environment variable
	CONTEXT="$DOCKERC_CONTEXT"
fi

COMMAND_PRESET=''
if [ -n "$DOCKERC_COMMAND_PRESET" ]; then
	# Use from argument or environment variable
	COMMAND_PRESET="$DOCKERC_COMMAND_PRESET"
fi

COMMAND_ARGS=''
if [ -n "$DOCKERC_COMMAND_ARGS" ]; then
	# Use from argument or environment variable
	COMMAND_ARGS="$DOCKERC_COMMAND_ARGS"
fi

get_latest_version() {
	# Syntax: '"tag_name": "v1.0.0",'
	LATEST_VERSION_JSON=$(
		curl -fsSL "https://api.github.com/repos/matiboux/dockerc/releases/latest" 2>/dev/null \
		| grep -Eo '"tag_name": "(.+?)",'
	)

	if [ -n "$LATEST_VERSION_JSON" ]; then
		if [ "$(uname -s)" = 'Darwin' ]; then
			# MacOS
			LATEST_VERSION="${LATEST_VERSION_JSON:14:$((${#LATEST_VERSION_JSON}-14-2))}"
		else
			# Linux
			LATEST_VERSION=$(expr substr "$LATEST_VERSION_JSON" $(expr 1 + 14) $(expr length "$LATEST_VERSION_JSON" - 14 - 2))
		fi

		echo "$LATEST_VERSION"
	fi
}

if [ "$DOCKERC_PRINT_VERSION" = 'true' ]; then
	# Print version & exit

	if [ "$QUIET" = 'false' ]; then
		echo "DockerC (v$VERSION) - https://github.com/matiboux/dockerc"

		if [ "$DRY_RUN" = 'false' ]; then
			LATEST_VERSION=$(get_latest_version)
			if [ "$VERSION" != "$LATEST_VERSION" ]; then
				echo "Notice: DockerC is not up to date, latest version is $LATEST_VERSION!" >&2
			fi
		fi

	else
		echo "v$VERSION"
	fi

	exit ${ERROR_CODE:-0}

fi

if [ "$UPDATE" = 'true' ]; then
	# Update DockerC & exit

	INSTALL_DIR=$(dirname "$0") # Default install directory
	if [ -n "$DOCKERC_INSTALL_DIR" ]; then
		# Use from environment variable
		INSTALL_DIR="$DOCKERC_INSTALL_DIR"
	fi

	if [ ! -d "$INSTALL_DIR" ]; then
		echo 'Error: Install directory does not exist.' >&2
		exit 1
	fi

	if [ $# -gt 0 ]; then
		if [ "$1" = 'HEAD' ] || [ "$1" = 'head' ] || [ "$1" = '.' ] || [ "$1" = '-' ]; then
			REQUIRED_VERSION='HEAD'
		else
			REQUIRED_VERSION="$1"
		fi
		shift
	else
		REQUIRED_VERSION="$(get_latest_version)"
	fi

	if [ "$DRY_RUN" = 'false' ]; then
		echo "Updating DockerC (v$REQUIRED_VERSION)..."
		exec /bin/sh -c "curl -fsSL \"https://raw.githubusercontent.com/matiboux/dockerc/HEAD/install.sh\" | /bin/sh -s -- \"$INSTALL_DIR\" \"$REQUIRED_VERSION\""
	else
		echo 'Updating DockerC (dry run):'
		echo "> curl -fsSL \"https://raw.githubusercontent.com/matiboux/dockerc/HEAD/install.sh\" | /bin/sh -s -- \"$INSTALL_DIR\" \"$REQUIRED_VERSION\""
	fi

	exit 0
fi

# Check for docker preset
if [ "$(echo "$CONTEXT" | cut -c1)" = '@' ]; then

	# Other arguments to pass to docker
	# Use single quotes to safely pass arguments to shell
	# Escape single quotes in arguments
	ARGS=''
	while [ $# -gt 0 ]; do
		NEW_ARG=$(echo "$1" | sed "s/'/'\"'\"'/g")
		ARGS="$ARGS '$NEW_ARG'"
		shift
	done

	PRINT_DOCKER_PRESETS_HELP='false'
	DOCKER_ARGS=''
	RUN_SHELL='false'

	# Remove first char
	CONTEXT="${CONTEXT#?}"

	case "$CONTEXT" in

		'')
			PRINT_DOCKER_PRESETS_HELP='true'
			;;

		'rfc')
			DOCKER_ARGS='container prune -f'
			;;
		'rfi')
			DOCKER_ARGS='image prune -f'
			;;
		'rfia')
			DOCKER_ARGS='image prune -f -a'
			;;
		'rf')
			DOCKER_ARGS='system prune -f'
			;;
		'rfa')
			DOCKER_ARGS='system prune -f -a'
			;;
		'rfav')
			DOCKER_ARGS='system prune -f -a --volumes'
			;;

		'sa')
			# Stop all containers
			DOCKER_ARGS='stop $(docker ps -q)'
			RUN_SHELL='true'
			;;

		'rmf')
			# Remove running containers, force
			DOCKER_ARGS='rm -f $(docker ps -a -q)'
			RUN_SHELL='true'
			;;
		'rms')
			# Remove stopped containers
			DOCKER_ARGS='rm $(docker ps -a -q -f status=exited -f status=dead)'
			RUN_SHELL='true'
			;;
		'rmsf'|'rmfs')
			# Remove stopped containers, force
			DOCKER_ARGS='rm -f $(docker ps -a -q -f status=exited -f status=dead)'
			RUN_SHELL='true'
			;;
		'rma')
			# Remove all containers
			DOCKER_ARGS='rm $(docker ps -a -q)'
			RUN_SHELL='true'
			;;
		'rmaf'|'rmfa')
			# Remove all containers, force
			DOCKER_ARGS='rm -f $(docker ps -q)'
			RUN_SHELL='true'
			;;

		*)
			echo "Error: Unknown docker preset '@$CONTEXT'" >&2
			exit 1
			;;

	esac

	if [ "$PRINT_DOCKER_PRESETS_HELP" = 'true' ]; then
		# Print help and exit
		echo 'DEPRECATED'
		exit 1
	fi

	if [ "$RUN_SHELL" = 'false' ]; then

		if [ "$QUIET" = 'false' ]; then
			# Print docker command
			echo ''
			echo "> docker ${DOCKER_ARGS}${ARGS}"
			echo ''
		fi

		if [ "$DRY_RUN" = 'false' ]; then
			# Run docker command
			exec docker ${DOCKER_ARGS}${ARGS}
		fi

	else # "$RUN_SHELL" = 'true'

		if [ "$QUIET" = 'false' ]; then
			# Print docker command
			echo ''
			echo "> sh -c 'docker ${DOCKER_ARGS}${ARGS}'"
			echo ''
		fi

		if [ "$DRY_RUN" = 'false' ]; then
			# Run docker command
			exec sh -c "docker ${DOCKER_ARGS}${ARGS}"
		fi

	fi

	exit 0

fi

# Other parameters are arguments passed to docker compose
ARGS="$@"

COMPOSE_FILE_ARGS=''
NO_COMPOSE_FILE_ARGS='false'
ABSTRACT_COMPOSE_FILE_ARGS='false'
ENV_FILE_ARGS=''

# If context is -, use default docker compose files (override if it exists)
if [ "$CONTEXT" = '-' ] || [ "$CONTEXT" = '.' ]; then
	CONTEXT=''

# If context is --, ignore context and use docker compose without file arguments
elif [ "$CONTEXT" = '--' ]; then
	NO_COMPOSE_FILE_ARGS='true'

fi

if [ "$NO_COMPOSE_FILE_ARGS" = 'false' ]; then

	# Check in current directory, then in docker directory
	while read -r dir; do

		ENV_FILE_ARGS=''
		PREFIX=''
		COMPOSE_FILE_ARGS_1_DEFAULT=''
		COMPOSE_FILE_ARGS_1=''
		PREFIX_1=''
		COMPOSE_FILE_ARGS_2=''
		PREFIX_2=''
		MISSING_PARTS=''

		if [ -f "$dir/.env" ]; then
			ENV_FILE_ARGS="$ENV_FILE_ARGS --env-file $dir/.env"
		fi

		if [ -f "$dir/.env.local" ]; then
			ENV_FILE_ARGS="$ENV_FILE_ARGS --env-file $dir/.env.local"
		fi

		COMPOSE_FILE_PATH="$dir/docker-compose.yml"
		if [ -f "$COMPOSE_FILE_PATH" ]; then
			COMPOSE_FILE_ARGS_1_DEFAULT=" -f $COMPOSE_FILE_PATH"

			if cat "$COMPOSE_FILE_PATH" | grep -q "^#:dockerc.abstract$"; then
				ABSTRACT_COMPOSE_FILE_ARGS='true'
			else
				ABSTRACT_COMPOSE_FILE_ARGS='false'
			fi
		fi

		if [ ! -z "$CONTEXT" ]; then

			while read -r part; do

				if [ -z "$part" ]; then
					continue
				fi

				PREFIX="$PREFIX.$part"

				if [ -f "$dir/.env.-.$part" ]; then
					ENV_FILE_ARGS="$ENV_FILE_ARGS --env-file $dir/.env.-.$part"
				fi

				if [ -f "$dir/.env.-.$part.local" ]; then
					ENV_FILE_ARGS="$ENV_FILE_ARGS --env-file $dir/.env.-.$part.local"
				fi

				if [ -f "$dir/.env$PREFIX" ]; then
					ENV_FILE_ARGS="$ENV_FILE_ARGS --env-file $dir/.env$PREFIX"
				fi

				if [ -f "$dir/.env$PREFIX.local" ]; then
					ENV_FILE_ARGS="$ENV_FILE_ARGS --env-file $dir/.env$PREFIX.local"
				fi

				if [ -z "$COMPOSE_FILE_ARGS_2" ]; then

					# Look for docker-compose$PREFIX_1.$part.yml
					COMPOSE_FILE_PATH="$dir/docker-compose$PREFIX_1.$MISSING_PARTS$part.yml"
					if [ -f "$COMPOSE_FILE_PATH" ]; then
						COMPOSE_FILE_ARGS_1="$COMPOSE_FILE_ARGS_1 -f $COMPOSE_FILE_PATH"
						PREFIX_1="$PREFIX_1.$MISSING_PARTS$part"
						MISSING_PARTS=''

						if cat "$COMPOSE_FILE_PATH" | grep -q "^#:dockerc.abstract$"; then
							ABSTRACT_COMPOSE_FILE_ARGS='true'
						else
							ABSTRACT_COMPOSE_FILE_ARGS='false'
						fi

					else
						# Part was not found, invalidate PREFIX_1
						PREFIX_1=''
					fi

				fi

				if [ -z "$COMPOSE_FILE_ARGS_1" ]; then

					if [ -z "$COMPOSE_FILE_ARGS_2" ]; then

						if [ -z "$PREFIX_2" ]; then

							# Look for docker-compose-$part.yml
							COMPOSE_FILE_PATH="$dir/docker-compose-$MISSING_PARTS$part.yml"
							if [ -f "$COMPOSE_FILE_PATH" ]; then
								COMPOSE_FILE_ARGS_2="$COMPOSE_FILE_ARGS_2 -f $COMPOSE_FILE_PATH"
								PREFIX_2="-$MISSING_PARTS$part"
								MISSING_PARTS=''

								if cat "$COMPOSE_FILE_PATH" | grep -q "^#:dockerc.abstract$"; then
									ABSTRACT_COMPOSE_FILE_ARGS='true'
								else
									ABSTRACT_COMPOSE_FILE_ARGS='false'
								fi
							fi

						fi

					else

						if [ ! -z "$PREFIX_2" ]; then

							# Look for docker-compose$PREFIX_2.$part.yml
							COMPOSE_FILE_PATH="$dir/docker-compose$PREFIX_2.$part.yml"
							if [ -f "$COMPOSE_FILE_PATH" ]; then
								COMPOSE_FILE_ARGS_2="$COMPOSE_FILE_ARGS_2 -f $COMPOSE_FILE_PATH"
								PREFIX_2="$PREFIX_2.$part"

								if cat "$COMPOSE_FILE_PATH" | grep -q "^#:dockerc.abstract$"; then
									ABSTRACT_COMPOSE_FILE_ARGS='true'
								else
									ABSTRACT_COMPOSE_FILE_ARGS='false'
								fi

							else
								# Part was not found, invalidate PREFIX_2
								PREFIX_2=''
							fi

						fi

					fi

				fi

				if [ -z "$PREFIX_1" ] && [ -z "$PREFIX_2" ]; then
					if [ -z "$MISSING_PARTS" ]; then
						MISSING_PARTS="$part."
					else
						MISSING_PARTS="$MISSING_PARTS$part."
					fi
				fi

			done <<EOF
$(echo "$CONTEXT" | tr '-' "\n" | tr '.' "\n")
EOF

		fi

		if [ ! -z "$PREFIX_2" ]; then
			COMPOSE_FILE_ARGS="$COMPOSE_FILE_ARGS_2"
			break

		elif [ ! -z "$PREFIX_1" ]; then
			COMPOSE_FILE_ARGS="$COMPOSE_FILE_ARGS_1_DEFAULT$COMPOSE_FILE_ARGS_1"
			break

		elif [ ! -z "$COMPOSE_FILE_ARGS_1_DEFAULT" ]; then

			if [ "$CONTEXT" = 'prod' ]; then
				COMPOSE_FILE_ARGS="$COMPOSE_FILE_ARGS_1_DEFAULT"
				break

			elif [ -z "$CONTEXT" ] || [ "$CONTEXT" = 'dev' ]; then

				COMPOSE_FILE_PATH="$dir/docker-compose.override.yml"
				if [ -f "$COMPOSE_FILE_PATH" ]; then
					COMPOSE_FILE_ARGS="$COMPOSE_FILE_ARGS_1_DEFAULT -f $COMPOSE_FILE_PATH"

					if cat "$COMPOSE_FILE_PATH" | grep -q "^#:dockerc.abstract$"; then
						ABSTRACT_COMPOSE_FILE_ARGS='true'
					else
						ABSTRACT_COMPOSE_FILE_ARGS='false'
					fi

					break

				elif [ -z "$CONTEXT" ]; then
					COMPOSE_FILE_ARGS="$COMPOSE_FILE_ARGS_1_DEFAULT"
					break

				fi

			fi

		fi

	done <<EOF
.
./docker
EOF

	# If compose file arguments are empty, exit with error
	if [ -z "$COMPOSE_FILE_ARGS" ]; then
		if [ -z "$CONTEXT" ]; then
			echo 'Error: Default context not found' >&2
		else
			echo "Error: Unknown context '$CONTEXT'" >&2
		fi
		exit 1
	fi

	# Unless force option is set,
	# If compose file arguments are abstract, exit with error
	if [ "$FORCE" = 'false' ] && [ "$ABSTRACT_COMPOSE_FILE_ARGS" = 'true' ]; then
		echo 'Error: Abstract context found' >&2
		exit 1
	fi

fi

# Check for shell arguments preset shortcut
if [ "$(echo "$ARGS" | cut -c 1-2)" = '$ ' ]; then
	# Replace arguments preset shortcut
	ARGS="@$ $(echo "$ARGS" | cut -c 3-)"
fi

# Check for arguments
if [ -z "$ARGS" ]; then
	# If arguments are empty, set to the default arguments
	ARGS='up -d'

# Check for arguments preset
elif [ "$(echo "$ARGS" | cut -c1)" = '@' ]; then

	# Get first arg as preset name
	ARGS_PRESET="${ARGS%% *}"
	ARGS_PRESET="${ARGS_PRESET#?}"

	# Clear first arg from args
	if [ "@$ARGS_PRESET" = "$ARGS" ]; then
		# No other args
		ARGS=''
	else
		# Other args
		ARGS=" ${ARGS#* }"
	fi

	PRINT_ARGS_PRESET_HELP='false'

	case "$ARGS_PRESET" in

		'')
			PRINT_ARGS_PRESET_HELP='true'
			;;

		'u')
			ARGS="up -d$ARGS"
			;;
		'ua')
			ARGS="up$ARGS"
			;;
		'ub')
			ARGS="up --build -d$ARGS"
			;;
		'uba')
			ARGS="up --build$ARGS"
			;;
		'ubf')
			ARGS="up --build -d --force-recreate$ARGS"
			;;
		'ubfa')
			ARGS="up --build --force-recreate$ARGS"
			;;
		'ubfp')
			ARGS="up --build -d --force-recreate --pull always$ARGS"
			;;
		'ubfap')
			ARGS="up --build --force-recreate --pull always$ARGS"
			;;
		'ubr')
			ARGS="up --build -d --remove-orphans$ARGS"
			;;
		'ubar')
			ARGS="up --build --remove-orphans$ARGS"
			;;
		'ubfr')
			ARGS="up --build -d --force-recreate --remove-orphans$ARGS"
			;;
		'ubfar')
			ARGS="up --build --force-recreate --remove-orphans$ARGS"
			;;
		'uf')
			ARGS="up -d --force-recreate$ARGS"
			;;
		'ufa')
			ARGS="up --force-recreate$ARGS"
			;;
		'ur')
			ARGS="up -d --remove-orphans$ARGS"
			;;
		'uar')
			ARGS="up --remove-orphans$ARGS"
			;;
		'ufr')
			ARGS="up -d --force-recreate --remove-orphans$ARGS"
			;;
		'ufar')
			ARGS="up --force-recreate --remove-orphans$ARGS"
			;;

		'b')
			ARGS="build$ARGS"
			;;
		'bp')
			ARGS="build --pull$ARGS"
			;;
		'bf')
			ARGS="build --pull --no-cache$ARGS"
			;;
		'bn')
			ARGS="build --dry-run --pull --no-cache$ARGS"
			;;

		'w')
			ARGS="watch$ARGS"
			;;
		'wq')
			ARGS="watch --quiet$ARGS"
			;;
		'ww')
			ARGS="watch --no-up$ARGS"
			;;
		'wqw')
			ARGS="watch --quiet --no-up$ARGS"
			;;
		'wn')
			ARGS="watch --dry-run$ARGS"
			;;

		'd')
			ARGS="down$ARGS"
			;;
		'da')
			ARGS="down --remove-orphans$ARGS"
			;;
		'dr')
			ARGS="down --remove-orphans --rmi local$ARGS"
			;;
		'dra')
			ARGS="down --remove-orphans --rmi all$ARGS"
			;;
		'drav')
			ARGS="down --remove-orphans --rmi all -v$ARGS"
			;;
		'drv')
			ARGS="down --remove-orphans -v$ARGS"
			;;

		'r')
			ARGS="run --rm$ARGS"
			;;
		'rw')
			ARGS="run -w /pwd -v $(pwd):/pwd --rm$ARGS"
			;;
		'rd')
			ARGS="run -d$ARGS"
			;;
		'rk')
			ARGS="run$ARGS"
			;;
		'rb')
			ARGS="run --build --rm$ARGS"
			;;
		'rbw')
			ARGS="run --build -w /pwd -v $(pwd):/pwd --rm$ARGS"
			;;
		'rbd')
			ARGS="run --build -d$ARGS"
			;;
		'rbk')
			ARGS="run --build$ARGS"
			;;
		'ri')
			ARGS="run -i --rm$ARGS"
			;;
		'rwi')
			ARGS="run -w /pwd -v $(pwd):/pwd -i --rm$ARGS"
			;;
		'rki')
			ARGS="run -i$ARGS"
			;;
		'rbi')
			ARGS="run --build -i --rm$ARGS"
			;;
		'rbwi')
			ARGS="run --build -w /pwd -v $(pwd):/pwd -i --rm$ARGS"
			;;
		'rbki')
			ARGS="run --build -i$ARGS"
			;;

		'sh')
			ARGS="run -i --rm --entrypoint /bin/sh$ARGS"
			;;
		'shw')
			ARGS="run -w /pwd -v $(pwd):/pwd -i --rm --entrypoint /bin/sh$ARGS"
			;;
		'$')
			ARGS="run -w /pwd -v $(pwd):/pwd -i --rm --entrypoint /bin/sh$ARGS"
			;;
		'shb')
			ARGS="run --build -i --rm --entrypoint /bin/sh$ARGS"
			;;
		'shbw')
			ARGS="run --build -w /pwd -v $(pwd):/pwd -i --rm --entrypoint /bin/sh$ARGS"
			;;
		'bash')
			ARGS="run -i --rm --entrypoint /bin/bash$ARGS"
			;;
		'bashw')
			ARGS="run -w /pwd -v $(pwd):/pwd -i --rm --entrypoint /bin/bash$ARGS"
			;;
		'bashb')
			ARGS="run --build -i --rm --entrypoint /bin/bash$ARGS"
			;;
		'bashbw')
			ARGS="run --build -w /pwd -v $(pwd):/pwd -i --rm --entrypoint /bin/bash$ARGS"
			;;

		'l')
			ARGS="logs -n 100$ARGS"
			;;
		'lf')
			ARGS="logs -n 100 -f$ARGS"
			;;
		'lt')
			ARGS="logs -n 100 -t$ARGS"
			;;
		'ls')
			ARGS="logs -n 100 --no-log-prefix$ARGS"
			;;
		'lft')
			ARGS="logs -n 100 -f -t$ARGS"
			;;
		'lfs')
			ARGS="logs -n 100 -f --no-log-prefix$ARGS"
			;;
		'lfts')
			ARGS="logs -n 100 -f -t --no-log-prefix$ARGS"
			;;
		'lts')
			ARGS="logs -n 100 -t --no-log-prefix$ARGS"
			;;
		'll')
			ARGS="logs$ARGS"
			;;
		"llf")
			ARGS="logs -f$ARGS"
			;;
		"llt")
			ARGS="logs -t$ARGS"
			;;
		"lls")
			ARGS="logs --no-log-prefix$ARGS"
			;;
		"llft")
			ARGS="logs -f -t$ARGS"
			;;
		"llfs")
			ARGS="logs -f --no-log-prefix$ARGS"
			;;
		"llfts")
			ARGS="logs -f -t --no-log-prefix$ARGS"
			;;
		"llts")
			ARGS="logs -t --no-log-prefix$ARGS"
			;;

		'p')
			ARGS="ps$ARGS"
			;;
		'pa')
			ARGS="ps -a$ARGS"
			;;

		'pu')
			ARGS="push$ARGS"
			;;

		'pl')
			ARGS="pull$ARGS"
			;;

		'rs')
			ARGS="rm --stop$ARGS"
			;;
		'rf')
			ARGS="rm -f$ARGS"
			;;
		'rfv')
			ARGS="rm -f -v$ARGS"
			;;

		*)
			echo "Error: Unknown args preset '@$ARGS_PRESET'" >&2
			exit 1
			;;

	esac

	if [ "$PRINT_ARGS_PRESET_HELP" = 'true' ]; then
		# Print help and exit
		echo 'DEPRECATED'
		exit 1
	fi

fi

if [ "$QUIET" = 'false' ]; then
	# Print docker compose command
	if [ "$DOCKERC_FIRST_NEWLINE" != 'false' ]; then
		echo ''
	fi
	echo "> docker compose$COMPOSE_FILE_ARGS$ENV_FILE_ARGS $ARGS"
	echo ''
fi

if [ "$DRY_RUN" = 'false' ]; then
	# Run docker compose
	exec docker compose$COMPOSE_FILE_ARGS$ENV_FILE_ARGS $ARGS
fi
